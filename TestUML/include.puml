@startuml
class Adresse {
    + StreetName : string <<get>> <<set>>
    + HouseNumber : string <<get>> <<set>>
    + City_AndPO_Box : string <<get>> <<set>>
    + Adresse(street:string, house:string, city:string)
    + <<override>> ToString() : string
}
abstract class Person {
    + Name : string <<get>>
    + Age : int <<get>>
    + Person(name:string, age:int, address:Adresse)
    + <<override>> ToString() : string
}
abstract class Worker {
    + Salary : decimal <<get>> <<set>>
    + Worker(name:string, age:int, address:Adresse, salary:decimal)
    + <<override>> ToString() : string
}
class Arbeiter {
    + Arbeiter(name:string, age:int, address:Adresse, salary:decimal)
}
class Angestellter {
    + Angestellter(name:string, age:int, address:Adresse, salary:decimal)
}
class Client {
    + Client(name:string, age:int, address:Adresse)
    + BuyProduct(p:Product, amount:int) : void
    + BoughtProducts() : void
    + <<override>> ToString() : string
}
class Product {
    + ProductName : string <<get>> <<set>>
    + Product(name:string)
    + <<override>> ToString() : string
}
class Fabric {
    + Fabric(adress:Adresse)
    + AddProduct(p:Product) : void
    + AddClient(c:Client) : void
    + AddWorker(w:Worker) : void
    + Products() : void
    + Clients() : void
    + Workers() : void
}
class Program {
    {static} Main(args:string[]) : void
}
class "List`1"<T> {
}
Person --> "Address" Adresse
Person <|-- Worker
Worker <|-- Arbeiter
Worker <|-- Angestellter
Person <|-- Client
Client --> "Products<Product>" "List`1"
Fabric --> "Address" Adresse
Fabric --> "OurProducts<Product>" "List`1"
Fabric --> "OurClients<Client>" "List`1"
Fabric --> "OurWorkers<Worker>" "List`1"
Fabric --> "Manager" Worker
@enduml
